#!/usr/bin/env node
'use strict';

const path = require('path');
const fs = require("fs");
const envFile = path.join(__dirname, "../.env");
try {
	fs.accessSync(envFile, fs.F_OK);
	console.log("loading .env file");
	require('dotenv').config({path: envFile});
} catch (e) {
	// no env file
}

const app = require('../app/server');
const debug = require('debug')('obs-octoprint:server');
const http = require('http');
let port;
let server;

/**
 * Normalize a port into a number, string, or false.
 * @param {int} val
 */
function normalizePort(val) {
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		return val;
	} else if (port >= 0) {
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 * @param {object} error
 */
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	let bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			throw new Error(`${bind} requires elevated privileges.`);
		case 'EADDRINUSE':
			throw new Error(`${bind} is already in use.`);
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
	let addr = server.address();
	let bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
	console.log('Listening on ' + bind);
	debug('Listening on ' + bind);
}

/**
 * Get this party started :)
 */
port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
